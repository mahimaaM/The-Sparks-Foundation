                                                         || The Spark Foundation ||


                                                            NAME: MAHIMA MAURYA
                                                            
                                                      INTERN AT THE SPARK FOUNDATION
                                                                #GRIPJUNE21



                                                 TASK-2: Color Identification in Images 


# Import all libraries

from google.colab import drive
drive.mount('/content/drive',force_remount=False)
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
%matplotlib inline


from sklearn.cluster import KMeans
from collections import Counter
from skimage.color import rgb2lab, deltaE_cie76


from skimage import io
from google.colab.patches import cv2_imshow
import cv2
from google.colab import files


# Working with OpenCV

 import os
 import cv2
 image_path="/content/drive/My Drive/Class_identification/images"
 image =cv2.imread(os.path.join(image_path,'photo1.jpg'),cv2.IMREAD_COLOR)
 
 print("The type of this input is {}".format(type(image)))
 print("Shape: {}".format(image.shape))

 cv2_imshow(image)
 

image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image)


# Gray Image

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(gray_image, cmap='gray')


# Resized Image

resized_image = cv2.resize(image, (1200, 600))
plt.imshow(resized_image)


# Color Identification

# RGB to Hex Conversion

def RGB2HEX(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))


# Read image in RGB color space


def get_image(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    return image


# Get colors from an image

def get_colors(image, number_of_colors, show_chart):
    
    modified_image = cv2.resize(image, (600, 400), interpolation = cv2.INTER_AREA)
    modified_image = modified_image.reshape(modified_image.shape[0]*modified_image.shape[1], 3)
    
    clf = KMeans(n_clusters = number_of_colors)
    labels = clf.fit_predict(modified_image)
    
    counts = Counter(labels)
    
    center_colors = clf.cluster_centers_
    # We get ordered colors by iterating through the keys
    ordered_colors = [center_colors[i]/255 for i in counts.keys()]
    hex_colors = [RGB2HEX(ordered_colors[i]*255) for i in counts.keys()]
    rgb_colors = [ordered_colors[i]*255 for i in counts.keys()]
    
    if (show_chart):
        plt.figure(figsize = (8, 6))
        plt.pie(counts.values(), labels = hex_colors, colors = ordered_colors)
    
    return rgb_colors


get_colors(image, 8, True)


# Search Images using color


# Get all images



image_path="/content/drive/My Drive/Class_identification/images"

COLORS = {
    'GREEN'  : [0, 128, 0],
    'BLUE'   : [0, 0, 128],
    'YELLOW' : [255, 255, 0],
    'RED'    : [255, 0, 0],
    'MAGENTA': [255, 0, 255],
    }

images = []

for file in os.listdir(image_path):
    if not file.startswith('.'):
        images.append(get_image(os.path.join(image_path, file)))


# Show all images


plt.figure(figsize=(30,20))
for i in range(len(images)):
    plt.subplot(1, 15, i+1)
    plt.imshow(images[i])


# Match Images with color


def match_image_by_color(image, color, threshold = 60, number_of_colors = 10): 
    
    image_colors = get_colors(image, number_of_colors, False)
    selected_color = rgb2lab(np.uint8(np.asarray([[color]])))

    select_image = False
    for i in range(number_of_colors):
        curr_color = rgb2lab(np.uint8(np.asarray([[image_colors[i]]])))
        diff = deltaE_cie76(selected_color, curr_color)
        if (diff < threshold):
            select_image = True
    
    return select_image


# Show selected images


def show_selected_images(images, color, threshold, colors_to_match):
    index = 1
    
    for i in range(len(images)):
        selected = match_image_by_color(images[i], color, threshold, colors_to_match)
        if (selected):
            plt.subplot(1, 6, index)
            plt.imshow(images[i])
            index += 1


# Filter Results


# Search for GREEN


plt.figure(figsize = (30,20))
show_selected_images(images, COLORS['GREEN'], 60, 6)


# Search for BLUE


plt.figure(figsize = (30,20))
show_selected_images(images, COLORS['BLUE'], 60, 6)


# Search for YELLOW


plt.figure(figsize = (30,20))
show_selected_images(images, COLORS['YELLOW'], 60, 6)


# Search for RED


plt.figure(figsize = (30, 20))
show_selected_images(images, COLORS['RED'], 60, 6)


# Search for MAGENTA


plt.figure(figsize = (30, 20))
show_selected_images(images, COLORS['MAGENTA'], 60, 6)


                                                                   DONE!!! 

                                                                 THANK YOU!!
